<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dragonbones</name>
    </assembly>
    <members>
        <member name="T:Dragonbones.Components.ComponentBuffer`1">
            <summary>
            A base implementation of <see cref="T:Dragonbones.Components.IComponentBuffer`1"/>
            </summary>
            <typeparam name="TComponent">the component type stored</typeparam>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructs the component buffer
            </summary>
            <param name="initialCapacity">the initial size of the buffer</param>
            <param name="hashSize">the size of the buffer's hash table, the larger the faster the name lookup but the more memory used</param>
            <param name="typeName">The name of the component type stored here</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.SwapReadBuffer">
            <summary>
            Swaps the data buffer for reading
            </summary>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.SwapWriteBuffer">
            <summary>
            Swaps the data buffer for writing
            Should be done when finished writing
            </summary>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Dragonbones.Components.ComponentBuffer`1.TypeName">
            <summary>
            The user defined typeName
            be sure to make this as unique as possible
            (use project specific identifiers like {StudioName}.{ProjectName}.{ComponentName})
            </summary>
        </member>
        <member name="P:Dragonbones.Components.ComponentBuffer`1.BufferID">
            <summary>
            A ID assigned by the system to this Buffer
            Should be assigned by SetBufferID function
            </summary>
        </member>
        <member name="P:Dragonbones.Components.ComponentBuffer`1.WaitingClear">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.SetBufferID(System.Int32)">
            <summary>
            Sets the BufferID field
            Used by the system to set the buffer's ID
            !!! DO NOT USE THIS FUNCTION !!!
            </summary>
            <param name="id">The ID to set to this buffer</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Count(Dragonbones.Systems.SystemType)">
            <summary>
            Gets the count of entries in the buffer
            </summary>
            <param name="systemType">the type of system making the call which affects where in the buffer the data is retrieved</param>
            <returns>the count of entries in the buffer from the perspective of the system</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Constrict(System.Int32)">
            <summary>
            Attempts to shrink the buffer to a new capacity.
            If it cannot it will shrink as small as it can
            </summary>
            <param name="newCapacity">the capacity to attempt to shrink to</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.ContainsID(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Checks if there is a stored component associated with the given ID
            </summary>
            <param name="id">the ID to check</param>
            <param name="systemType">the type of system making the call</param>
            <returns>Whether the ID is associated with a stored component</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.ContainsName(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Check if there is a stored component associated with the given name
            </summary>
            <param name="name">the name to check</param>
            <param name="systemType">the type of system making the call</param>
            <returns>Whether the name is associated with a stored component</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.GetIDFromName(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Gets the ID associated with the given name
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="name">the name to find the ID of</param>
            <returns>the ID associated with the given name or -1 if not found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.RemoveAt(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Removes a component associated with the given ID
            </summary>
            <param name="systemType">the type of system making the call
            Remove calls are ignored from Render Systems</param>
            <param name="id">the ID associated with the component to remove</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.RemoveAt(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Removes a component associated with the given name
            </summary>
            <param name="systemType">the type of system making the call
            Remove calls are ignored from Render Systems</param>
            <param name="name"></param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Clear(Dragonbones.Systems.SystemType)">
            <summary>
            Remove all data from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Clear calls are ignored from Render Systems</param>
        </member>
        <member name="P:Dragonbones.Components.ComponentBuffer`1.Item(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Accesses a component for a system
            Render systems cannot set values
            </summary>
            <param name="systemType">what type of system is accessing the buffer</param>
            <param name="id">the ID of the component to access</param>
            <returns>The component associated with the ID</returns>
        </member>
        <member name="P:Dragonbones.Components.ComponentBuffer`1.Item(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Accesses a component for a system
            Render systems cannot set values
            </summary>
            <param name="systemType">what type of system is accessing the buffer</param>
            <param name="name">the name of the component to access</param>
            <returns>The component associated with the name</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Add(Dragonbones.Systems.SystemType,System.String,`0)">
            <summary>
            Adds a component to the buffer
            </summary>
            <param name="systemType">the type of system making the call, Render systems cannot add components</param>
            <param name="name">the name of the component I suggest something like {entityName}.{ComponentType}#</param>
            <param name="value">the value to store</param>
            <returns>the id associated with the value to store</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.TryGet(Dragonbones.Systems.SystemType,System.Int32,`0@)">
            <summary>
            Attempts to retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="id">the ID associated with the component</param>
            <param name="value">the component associated with the ID</param>
            <returns>Whether a component is associated with the given ID</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.TryGet(Dragonbones.Systems.SystemType,System.String,`0@)">
            <summary>
            Attempts to retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="name">the name associated with the component</param>
            <param name="value">the component associated with the name</param>
            <returns>Whether a component is associated with the given name</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Get(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="id">the ID associated with the component</param>
            <returns>the component associated with the ID</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Get(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="name">the name associated with the component</param>
            <returns>the component associated with the name</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Set(Dragonbones.Systems.SystemType,System.Int32,`0)">
            <summary>
            Set the value of a component from a system
            </summary>
            <param name="systemType">the type of system making the call
            Set calls are ignored from Render Systems</param>
            <param name="id">the ID associated with component</param>
            <param name="value">the value to set</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Set(Dragonbones.Systems.SystemType,System.String,`0)">
            <summary>
            Set the value of a component from a system
            </summary>
            <param name="systemType">the type of system making the call
            Set calls are ignored from Render Systems</param>
            <param name="name">the name associated with component</param>
            <param name="value">the value to set</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Remove(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Remove a component matching the given value
            </summary>
            <param name="systemType">the type of system making the call
            Remove calls are ignored from Render Systems</param>
            <param name="value">the value to remove</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Contains(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Does this Buffer contain a component
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="value">the component to check</param>
            <returns>Whether the component was found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.GetID(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Get the ID associated with a component
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="value">the component</param>
            <returns>the ID associated with the component or -1 if not found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.GetName(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Get the name associated with a component
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="value">the component</param>
            <returns>the name associated with a component or "~NOT FOUND~" if not found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.PopAt(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Retrieve then removes a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="name">the name associated with the component</param>
            <returns>the component associated with the name</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.PopAt(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Retrieve then removes a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="id">the ID associated with the component</param>
            <returns>the component associated with the ID</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Pop(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Retrieve current value of a component then remove it from the buffer
            This only works if the <see cref="!:TComponent"/>.Equals(<see cref="!:TComponent"/>); is written so that the items don't need to be completely identical
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="value">the component to retrieve and remove</param>
            <returns>the updated copy of the component</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.TryPopAt(Dragonbones.Systems.SystemType,System.String,`0@)">
            <summary>
            Attempts to retrieve then remove a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="name">the name associated with the component</param>
            <param name="value">the current value retrieved</param>
            <returns>Whether the pop was successful</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.TryPopAt(Dragonbones.Systems.SystemType,System.Int32,`0@)">
            <summary>
            Attempts to retrieve then remove a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="id">the ID associated with the component</param>
            <param name="value">the current value retrieved</param>
            <returns>Whether the pop was successful</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.TryPop(Dragonbones.Systems.SystemType,`0,`0@)">
            <summary>
            Attempts to retrieve current value of a component then remove it from the buffer
            This only works if the <see cref="!:TComponent"/>.Equals(<see cref="!:TComponent"/>); is written so that the items don't need to be completely identical
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="value">the component to retrieve and remove</param>
            <param name="newValue">the current value retrieved</param>
            <returns>Whether the pop was successful</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="managed">dispose managed objects?</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Equals(Dragonbones.Components.IComponentBuffer)">
            <inheritdoc/>
        </member>
        <member name="T:Dragonbones.Components.ComponentTypeRegistry">
            <summary>
            The base implementation for <see cref="T:Dragonbones.Components.IComponentTypeRegistry"/>
            </summary>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for <see cref="T:Dragonbones.Components.ComponentTypeRegistry"/>
            </summary>
            <param name="pagePower">the size of pages as a power of 2</param>
            <param name="pageCount">the number of initial pages, has an affect on early performance but a memory impact</param>
            <param name="hashSize">the size of the hash table, the larger the faster the name search, the more memory it will use</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Clear">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Get``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Get``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.GetID(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.GetID(Dragonbones.Components.IComponentBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.GetName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.GetName(Dragonbones.Components.IComponentBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Register(Dragonbones.Components.IComponentBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Remove(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Remove(Dragonbones.Components.IComponentBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.TryGet``1(System.Int32,Dragonbones.Components.IComponentBuffer{``0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.TryGet``1(System.String,Dragonbones.Components.IComponentBuffer{``0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Dispose(System.Boolean)">
            <summary>
            Disposes of this object
            </summary>
            <param name="disposing">Should managed objects be disposed</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.SwapReadBuffer">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.SwapWriteBuffer">
            <inheritdoc/>
        </member>
        <member name="T:Dragonbones.Components.SingletonBuffer`1">
            <summary>
            A special form of a <see cref="T:Dragonbones.Components.IComponentBuffer"/> designed to store only a single value for all ids
            used to retrieve values which are universal over all instances
            </summary>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.#ctor(System.String)">
            <summary>
            Constructs a singleton buffer
            </summary>
            <param name="typeName">the name of the type of value stored</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.SwapReadBuffer">
            <summary>
            Swaps the data buffer for reading
            </summary>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.SwapWriteBuffer">
            <summary>
            Swaps the data buffer for writing
            Should be done when finished writing
            </summary>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Dragonbones.Components.SingletonBuffer`1.TypeName">
            <summary>
            The user defined typeName
            be sure to make this as unique as possible
            (use project specific identifiers like {StudioName}.{ProjectName}.{ComponentName})
            </summary>
        </member>
        <member name="P:Dragonbones.Components.SingletonBuffer`1.BufferID">
            <summary>
            A ID assigned by the system to this Buffer
            Should be assigned by SetBufferID function
            </summary>
        </member>
        <member name="P:Dragonbones.Components.SingletonBuffer`1.WaitingClear">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.SetBufferID(System.Int32)">
            <summary>
            Sets the BufferID field
            Used by the system to set the buffer's ID
            !!! DO NOT USE THIS FUNCTION !!!
            </summary>
            <param name="id">The ID to set to this buffer</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Count(Dragonbones.Systems.SystemType)">
            <summary>
            Gets the count of entries in the buffer
            </summary>
            <param name="systemType">the type of system making the call which affects where in the buffer the data is retrieved</param>
            <returns>the count of entries in the buffer from the perspective of the system</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Constrict(System.Int32)">
            <summary>
            Attempts to shrink the buffer to a new capacity.
            If it cannot it will shrink as small as it can
            </summary>
            <param name="newCapacity">the capacity to attempt to shrink to</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.ContainsID(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Checks if there is a stored component associated with the given ID
            </summary>
            <param name="id">the ID to check</param>
            <param name="systemType">the type of system making the call</param>
            <returns>Whether the ID is associated with a stored component</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.ContainsName(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Check if there is a stored component associated with the given name
            </summary>
            <param name="name">the name to check</param>
            <param name="systemType">the type of system making the call</param>
            <returns>Whether the name is associated with a stored component</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.GetIDFromName(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Gets the ID associated with the given name
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="name">the name to find the ID of</param>
            <returns>the ID associated with the given name or -1 if not found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.RemoveAt(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Removes a component associated with the given ID
            </summary>
            <param name="systemType">the type of system making the call
            Remove calls are ignored from Render Systems</param>
            <param name="id">the ID associated with the component to remove</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.RemoveAt(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Removes a component associated with the given name
            </summary>
            <param name="systemType">the type of system making the call
            Remove calls are ignored from Render Systems</param>
            <param name="name"></param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Clear(Dragonbones.Systems.SystemType)">
            <summary>
            Remove all data from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Clear calls are ignored from Render Systems</param>
        </member>
        <member name="P:Dragonbones.Components.SingletonBuffer`1.Item(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Accesses a component for a system
            Render systems cannot set values
            </summary>
            <param name="systemType">what type of system is accessing the buffer</param>
            <param name="id">the ID of the component to access</param>
            <returns>The component associated with the ID</returns>
        </member>
        <member name="P:Dragonbones.Components.SingletonBuffer`1.Item(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Accesses a component for a system
            Render systems cannot set values
            </summary>
            <param name="systemType">what type of system is accessing the buffer</param>
            <param name="name">the name of the component to access</param>
            <returns>The component associated with the name</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Add(Dragonbones.Systems.SystemType,System.String,`0)">
            <summary>
            Adds a component to the buffer
            </summary>
            <param name="systemType">the type of system making the call, Render systems cannot add components</param>
            <param name="name">the name of the component I suggest something like {entityName}.{ComponentType}#</param>
            <param name="value">the value to store</param>
            <returns>the id associated with the value to store</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.TryGet(Dragonbones.Systems.SystemType,System.Int32,`0@)">
            <summary>
            Attempts to retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="id">the ID associated with the component</param>
            <param name="value">the component associated with the ID</param>
            <returns>Whether a component is associated with the given ID</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.TryGet(Dragonbones.Systems.SystemType,System.String,`0@)">
            <summary>
            Attempts to retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="name">the name associated with the component</param>
            <param name="value">the component associated with the name</param>
            <returns>Whether a component is associated with the given name</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Get(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="id">the ID associated with the component</param>
            <returns>the component associated with the ID</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Get(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="name">the name associated with the component</param>
            <returns>the component associated with the name</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Set(Dragonbones.Systems.SystemType,System.Int32,`0)">
            <summary>
            Set the value of a component from a system
            </summary>
            <param name="systemType">the type of system making the call
            Set calls are ignored from Render Systems</param>
            <param name="id">the ID associated with component</param>
            <param name="value">the value to set</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Set(Dragonbones.Systems.SystemType,System.String,`0)">
            <summary>
            Set the value of a component from a system
            </summary>
            <param name="systemType">the type of system making the call
            Set calls are ignored from Render Systems</param>
            <param name="name">the name associated with component</param>
            <param name="value">the value to set</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Remove(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Remove a component matching the given value
            </summary>
            <param name="systemType">the type of system making the call
            Remove calls are ignored from Render Systems</param>
            <param name="value">the value to remove</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Contains(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Does this Buffer contain a component
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="value">the component to check</param>
            <returns>Whether the component was found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.GetID(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Get the ID associated with a component
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="value">the component</param>
            <returns>the ID associated with the component or -1 if not found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.GetName(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Get the name associated with a component
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="value">the component</param>
            <returns>the name associated with a component or "~NOT FOUND~" if not found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.PopAt(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Retrieve then removes a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="name">the name associated with the component</param>
            <returns>the component associated with the name</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.PopAt(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Retrieve then removes a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="id">the ID associated with the component</param>
            <returns>the component associated with the ID</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Pop(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Retrieve current value of a component then remove it from the buffer
            This only works if the <see cref="!:TComponent"/>.Equals(<see cref="!:TComponent"/>); is written so that the items don't need to be completely identical
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="value">the component to retrieve and remove</param>
            <returns>the updated copy of the component</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.TryPopAt(Dragonbones.Systems.SystemType,System.String,`0@)">
            <summary>
            Attempts to retrieve then remove a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="name">the name associated with the component</param>
            <param name="value">the current value retrieved</param>
            <returns>Whether the pop was successful</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.TryPopAt(Dragonbones.Systems.SystemType,System.Int32,`0@)">
            <summary>
            Attempts to retrieve then remove a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="id">the ID associated with the component</param>
            <param name="value">the current value retrieved</param>
            <returns>Whether the pop was successful</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.TryPop(Dragonbones.Systems.SystemType,`0,`0@)">
            <summary>
            Attempts to retrieve current value of a component then remove it from the buffer
            This only works if the <see cref="!:TComponent"/>.Equals(<see cref="!:TComponent"/>); is written so that the items don't need to be completely identical
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="value">the component to retrieve and remove</param>
            <param name="newValue">the current value retrieved</param>
            <returns>Whether the pop was successful</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Dispose(System.Boolean)">
            <summary>
            Dispose this object
            </summary>
            <param name="disposing">Are managed objects being disposed</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Equals(Dragonbones.Components.IComponentBuffer)">
            <inheritdoc/>
        </member>
        <member name="T:Dragonbones.Components.SingletonBuffer`1.Enumerator">
            <summary>
            Implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/> for a Singleton Buffer
            </summary>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Enumerator.#ctor(Dragonbones.Collections.BufferTransactionType,Dragonbones.Components.SingletonBuffer{`0})">
            <summary>
            Basic constructor for the enumerator
            </summary>
            <param name="type">the transaction type, used to define where the information comes from</param>
            <param name="buffer">the buffer data comes from</param>
        </member>
        <member name="P:Dragonbones.Components.SingletonBuffer`1.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Enumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Enumerator.Dispose(System.Boolean)">
            <summary>
            Disposes this object
            </summary>
            <param name="disposing">is this disposing managed objects</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Dragonbones.EngineLoader">
            <summary>
            The class which is responsible for starting up the entity admin
            and adding systems and components prior to the admin starting
            </summary>
        </member>
        <member name="P:Dragonbones.EngineLoader.Admin">
            <summary>
            The controlling Entity Admin which will run the engine
            </summary>
        </member>
        <member name="M:Dragonbones.EngineLoader.#ctor(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs an engine loader with the given parameters using the default admin and default storages
            </summary>
            <param name="targetLogicFrameLength">the frame length in seconds of logic updates which the engine will attempt to keep</param>
            <param name="targetMaxRenderFrameLength">the frame length in seconds of render updates which the engine will try to stay below</param>
            <param name="componentTypePagePower">the size of component type pages as a power of 2</param>
            <param name="componentTypePageCount">the number of component type pages to start with, this can affect memory and performance</param>
            <param name="systemPagePower">the size of system pages as a power of 2</param>
            <param name="systemPageCount">the number of system pages to start with, this can affect memory and performance</param>
            <param name="entityPagePower">the size of entity pages as a power of 2</param>
            <param name="entityPageCount">the number of entity pages to start with, this can affect memory and performance</param>
            <param name="entityComponentPagePower">the size of entity-component link pages as a power of 2</param>
            <param name="entityComponentPageCount">the number of entity-component link pages to start with, this can affect memory and performance</param>
        </member>
        <member name="M:Dragonbones.EngineLoader.#ctor(Dragonbones.Components.IComponentTypeRegistry,Dragonbones.Systems.ISystemRegistry,Dragonbones.Entities.IEntityBuffer,System.Single,System.Single)">
            <summary>
            Constructs an engine loader with the given parameters using the default admin
            </summary>
            <param name="targetLogicFrameLength">the frame length in seconds of logic updates which the engine will attempt to keep</param>
            <param name="targetMaxRenderFrameLength">the frame length in seconds of render updates which the engine will try to stay below</param>
            <param name="componentTypeRegistry">the component type registry to use to store component types</param>
            <param name="systemRegistry">the system registry to store systems</param>
            <param name="entityBuffer">the entity buffer to use to store entities</param>
        </member>
        <member name="M:Dragonbones.EngineLoader.#ctor(Dragonbones.IEntityAdmin)">
            <summary>
            Construct an engine loader with the given admin
            </summary>
            <param name="admin">The admin to run this engine instance</param>
        </member>
        <member name="M:Dragonbones.EngineLoader.LoadComponents">
            <summary>
            Load component types in to the type buffer and initial components if necessary
            This runs before systems are loaded
            </summary>
        </member>
        <member name="M:Dragonbones.EngineLoader.LoadSystems">
            <summary>
            Load systems into the system registry and initalize necessary variables
            This runs after components are loaded, but before system initialize
            </summary>
        </member>
        <member name="M:Dragonbones.EngineLoader.Run">
            <summary>
            Starts the Engine loading components and systems first
            </summary>
        </member>
        <member name="T:Dragonbones.Entities.EntityBuffer">
            <summary>
            A basic implementation of <see cref="T:Dragonbones.Entities.IEntityBuffer"/>
            This is designed for consistent speed especially as the number of entities and components get large
            Larger entities(ones which have many components) will be slowed in this implementation
            </summary>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs an entity buffer
            </summary>
            <param name="entityHash">the hash value for the entity hash table, larger means faster name searches but more memory</param>
            <param name="systemLinkHash">the hash value for system link hash table, larger means faster search but more memory</param>
            <param name="entityPagePower">the size of the entity pages in the form of a power of 2</param>
            <param name="entityPageCount">the initial number of entity pages, this has a small affect on early performance</param>
            <param name="entityComponentPagePower">the size of the entity component pages in the form of a power of 2</param>
            <param name="entityComponentPageCount">the initial number of entity pages, this has a small affect on early performance</param>
            <param name="entityListPagePower">the size of the entity list pages in the form of a power of 2</param>
            <param name="entityListPageCount">the initial number of entity pages, this has a small affect on early performance</param>
            <param name="systemLinkPagePower">the size of the systemlink pages in the form of a power of 2</param>
            <param name="systemLinkPageCount">the initial number of entity pages, this has a small affect on early performance</param>
        </member>
        <member name="P:Dragonbones.Entities.EntityBuffer.RemovedEntities">
            <inheritdoc/>
        </member>
        <member name="P:Dragonbones.Entities.EntityBuffer.Count">
            <inheritdoc/>
        </member>
        <member name="P:Dragonbones.Entities.EntityBuffer.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Dragonbones.Entities.EntityBuffer.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Add(Dragonbones.Systems.SystemType,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.GetID(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.GetName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Rename(Dragonbones.Systems.SystemType,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Remove(Dragonbones.Systems.SystemType,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.ContainsComponent(System.Int32,System.Int32,Dragonbones.Collections.BufferTransactionType)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.GetComponent(System.Int32,System.Int32,Dragonbones.Collections.BufferTransactionType)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.GetComponents(System.Int32,Dragonbones.Collections.BufferTransactionType)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.SetLink(Dragonbones.Systems.SystemType,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.RemoveLink(Dragonbones.Systems.SystemType,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.RegisterSystem(Dragonbones.Systems.ISystem)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.GetEntities(Dragonbones.Systems.ISystem)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.RemoveSystem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Contains(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Contains(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.ClearEntities(Dragonbones.Systems.SystemType)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.ClearSystems(Dragonbones.Systems.SystemType)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Clear(Dragonbones.Systems.SystemType)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.SwapReadBuffer">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.SwapWriteBuffer">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Dispose(System.Boolean)">
            <summary>
            Dispose of this object
            </summary>
            <param name="disposing">should managed objects be disposed</param>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Dragonbones.EntityAdmin">
            <summary>
            A Default implementation for <see cref="T:Dragonbones.IEntityAdmin"/>
            This implementation focuses on running the systems using a load balance system to allow as much rendering power when available, 
            but when not available attempting to give enough power so that updates can smoothly run
            </summary>
        </member>
        <member name="M:Dragonbones.EntityAdmin.GetThreads">
            <summary>
            An array of all the threads used for computing
            index 0 is the main thread
            </summary>
        </member>
        <member name="M:Dragonbones.EntityAdmin.SetThreads(System.Threading.Thread[])">
            <summary>
            An array of all the threads used for computing
            index 0 is the main thread
            </summary>
        </member>
        <member name="M:Dragonbones.EntityAdmin.GetEvents">
            <summary>
            Event handlers used to wait on individual threads for all threads
            Main use is to wait when systemSchedule is conflicting
            </summary>
        </member>
        <member name="M:Dragonbones.EntityAdmin.SetEvents(System.Threading.AutoResetEvent[])">
            <summary>
            Event handlers used to wait on individual threads for all threads
            Main use is to wait when systemSchedule is conflicting
            </summary>
            <param name="value">the new value for the events array</param>
        </member>
        <member name="P:Dragonbones.EntityAdmin.LogicBarrier">
            <summary>
            The barrier used to syncronize logic threads
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.RenderBarrier">
            <summary>
            The barrier used to syncronize render threads
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.SystemBarrier">
            <summary>
            The barrier used to syncronize all threads
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.Running">
            <summary>
            is the game still running
            used to stop the game when finished and then cleanup after finished running
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.CurrentLogicSchedule">
            <summary>
            The current schedule being used for logic systems
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.NewLogicSchedule">
            <summary>
            The next schedule to be used or the old schedule if schedule was just replaced
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.LogicScheduleAvailable">
            <summary>
            Is a new schedule available for logic systems
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.CurrentRenderSchedule">
            <summary>
            The current schedule being used for render systems
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.NewRenderSchedule">
            <summary>
            The next schedule to be used or the old schedule if the schedule was just replaced
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.RenderScheduleAvailable">
            <summary>
            Is a new schedule available for render systems
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.LogicDeltaTime">
            <summary>
            The amount of time in seconds between logic runs
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.LogicTime">
            <summary>
            The amount of time taken for all logic system to run
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.LogicInterval">
            <summary>
            The desired time interval in seconds between logic runs
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.MaxRenderInterval">
            <summary>
            The minimum time interval in seconds between render runs
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.RenderDeltaTime">
            <summary>
            The amount of time in seconds between render runs
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.LogicDeltaTimeRender">
            <summary>
            The amount of time since the last logic update
            Used in render systems
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.LogicTimer">
            <summary>
            The timer used to time logic threads
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.RenderTimer">
            <summary>
            The timer used to time render threads
            </summary>
        </member>
        <member name="P:Dragonbones.EntityAdmin.Components">
            <inheritdoc/>
        </member>
        <member name="P:Dragonbones.EntityAdmin.Systems">
            <inheritdoc/>
        </member>
        <member name="P:Dragonbones.EntityAdmin.Entities">
            <inheritdoc/>
        </member>
        <member name="P:Dragonbones.EntityAdmin.LogicSchedule">
            <inheritdoc/>
        </member>
        <member name="P:Dragonbones.EntityAdmin.RenderSchedule">
            <inheritdoc/>
        </member>
        <member name="P:Dragonbones.EntityAdmin.LogicLaneCount">
            <inheritdoc/>
        </member>
        <member name="P:Dragonbones.EntityAdmin.RenderLaneCount">
            <inheritdoc/>
        </member>
        <member name="P:Dragonbones.EntityAdmin.TotalLaneCount">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.EntityAdmin.#ctor(System.Single,System.Single,Dragonbones.Components.IComponentTypeRegistry,Dragonbones.Systems.ISystemRegistry,Dragonbones.Entities.IEntityBuffer)">
            <summary>
            A constructor for the EntityAdmin
            </summary>
            <param name="logicUpdateInterval">the minimum interval of time for it to run updates in seconds</param>
            <param name="maxRenderInterval">the maximum desired interval for it to take for a render frame</param>
            <param name="components">the <see cref="T:Dragonbones.Components.IComponentTypeRegistry"/> to use to store component buffers</param>
            <param name="systems">the <see cref="T:Dragonbones.Systems.ISystemRegistry"/> to use to store systems</param>
            <param name="entities">the <see cref="T:Dragonbones.Entities.IEntityBuffer"/> to use to store entities</param>
            <param name="links">the <see cref="!:ILinkBuffer"/> to use to store links between entities and components</param>
        </member>
        <member name="M:Dragonbones.EntityAdmin.Run">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.EntityAdmin.MainLogicMethod">
            <summary>
            The method run on the main logic thread
            This should be used to handle anything that should be done only once and used to control the other threads
            Logic threads should handle the logic systems
            Main priority is running logic systems and swapping write buffers
            
            </summary>
        </member>
        <member name="M:Dragonbones.EntityAdmin.SecondaryMethod(System.Object)">
            <summary>
            The method run on secondary threads
            Use this to supplement the computing power of the main threads
            Do not count on having any threads run this method
            </summary>
            <param name="laneObject">the index of this thread (index 0 is reserved for the main thread)</param>
        </member>
        <member name="M:Dragonbones.EntityAdmin.MainRenderMethod(System.Object)">
            <summary>
            The main thread for rendering
            This should be used to handle anything that should be done only once and used to control the other threads
            </summary>
        </member>
        <member name="M:Dragonbones.EntityAdmin.SystemRun(System.Int32,Dragonbones.Systems.ISystemSchedule,Dragonbones.Native.PrecisionTimer,System.Single,System.Single)">
            <summary>
            The general method for how systems are run.
            </summary>
            <param name="laneID">what lane is calling</param>
            <param name="schedule">the schedule of systems to run</param>
            <param name="time">The current time in the frame</param>
            <param name="interval">the maximum amount of time to take on a frame</param>
            <param name="deltaTime">the time since last run</param>
        </member>
        <member name="M:Dragonbones.EntityAdmin.SystemInitialize(System.Int32,Dragonbones.Systems.ISystemSchedule)">
            <summary>
            The general method for how systems are initialized.
            </summary>
            <param name="laneID">what lane is calling</param>
            <param name="schedule">the schedule of systems to run</param>
        </member>
        <member name="M:Dragonbones.EntityAdmin.SystemDispose(System.Int32,Dragonbones.Systems.ISystemSchedule)">
            <summary>
            The general method for how systems are initialized.
            </summary>
            <param name="laneID">what lane is calling</param>
            <param name="schedule">the schedule of systems to run</param>
        </member>
        <member name="M:Dragonbones.EntityAdmin.Dispose(System.Boolean)">
            <summary>
            Disposes this object
            </summary>
            <param name="disposing">should the managed objects also be disposed</param>
        </member>
        <member name="M:Dragonbones.EntityAdmin.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Dragonbones.Systems.EntityDrivenSystem">
            <summary>
            A system which runs for every entity that matches its required components
            </summary>
        </member>
        <member name="P:Dragonbones.Systems.EntityDrivenSystem.Entities">
            <summary>
            A link to the entity buffer in the admin
            Here for quick access
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.EntityDrivenSystem.#ctor(Dragonbones.Systems.SystemInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Systems.EntityDrivenSystem.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Systems.EntityDrivenSystem.Run(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Systems.EntityDrivenSystem.Run(System.Int32,System.Single)">
            <summary>
            Runs this system on the given entity
            </summary>
            <param name="entity">the ID of the entity</param>
            <param name="deltaTime">the time since the last logic update (consistent for logic systems variable for rneder systems)</param>
        </member>
        <member name="T:Dragonbones.Systems.SafeSystemSchedule">
            <summary>
            A base implementation of <see cref="T:Dragonbones.Systems.ISystemSchedule"/> for Logic Systems
            uses a priority list to sort ahead of time
            Checks for conflicts in components to avoid parallel access
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.#ctor(Dragonbones.Systems.SystemType,System.Int32,System.Int32,System.Int32)">
            <summary>
            constructs an instance of <see cref="T:Dragonbones.Systems.SafeSystemSchedule"/>
            </summary>
            <param name="laneCount">the number of concurrent systems that can be run</param>
            <param name="type">the type of systems for this schedule</param>
            <param name="pagePower">the size of the storage pages as a power of 2, larger is closer to a flat array, but costs more memory</param>
            <param name="pageCount">the number of pages to initialize to start</param>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.#ctor(Dragonbones.Systems.SafeSystemSchedule)">
            <summary>
            copies an instance of <see cref="T:Dragonbones.Systems.SafeSystemSchedule"/>
            </summary>
            <param name="copy">the schedule to copy</param>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.Clear">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.Add(Dragonbones.Systems.SystemInfo)">
            <summary>
            <inheritdoc />
            Only sorted on insertion
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.NextSystem(System.Int32,Dragonbones.Systems.SystemInfo@)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.FindPreviousEntry(Dragonbones.Systems.SystemInfo,Dragonbones.Systems.SafeSystemSchedule.RREntry@)">
            <summary>
            find the index of the previous entry
            </summary>
            <param name="system">system to find previous entry</param>
            <param name="rr">the runrecurrence of the system if it exists
            if it does not exist then it is the one after it unless it is at the end then the previous run recurrence</param>
            <returns>the index of the previous entry or
            -1 if this entry should be placed at the beginning or
            -2 if it should be placed at the end</returns>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.Remove(Dragonbones.Systems.SystemInfo)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="T:Dragonbones.Systems.SafeSystemSchedule.RREntry">
            <summary>
            The entry used to track location of beginning of the run recurrences for faster sorting
            </summary>
        </member>
        <member name="T:Dragonbones.Systems.SafeSystemSchedule.Entry">
            <summary>
            Entry struct for storing linked list used in schedule
            </summary>
        </member>
        <member name="P:Dragonbones.Systems.SafeSystemSchedule.Finished">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:Dragonbones.Systems.SafeSystemSchedule.Count">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:Dragonbones.Systems.SafeSystemSchedule.Type">
            <summary>
            The type of systems for this schedule
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.Reset">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.FinishLane(System.Int32)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.AddFromRegistry(Dragonbones.Systems.ISystemRegistry)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.Dispose(System.Boolean)">
            <summary>
            Disposes this object
            </summary>
            <param name="disposing">should managed objects be disposed</param>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Dragonbones.Systems.System">
            <summary>
            a basic implementation of <see cref="T:Dragonbones.Systems.ISystem"/>
            This fills out basic functions which are the same for all systems
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.System.#ctor(Dragonbones.Systems.SystemInfo)">
            <summary>
            Constructs a system
            </summary>
            <param name="info">the info for the system</param>
        </member>
        <member name="P:Dragonbones.Systems.System.Info">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Systems.System.Equals(Dragonbones.Systems.ISystem)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Systems.System.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Systems.System.Run(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Systems.System.DisposeManaged">
            <summary>
            Dispose of managed objects here
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.System.DisposeNative">
            <summary>
            Dispose of Native objects here
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.System.Dispose(System.Boolean)">
            <summary>
            Disposes of this object
            </summary>
            <param name="disposing">should we dispose of managed objects</param>
        </member>
        <member name="M:Dragonbones.Systems.System.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Dragonbones.Systems.SystemRegistry">
             <summary>
             A base version of the <see cref="T:Dragonbones.Systems.SystemRegistry"/>
            
             This uses a <see cref="T:Dragonbones.Collections.Paged.NamedDataRegistry`1"/> to store the systems
             </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs an instance of <see cref="T:Dragonbones.Systems.SystemRegistry"/>
            </summary>
            <param name="systemPagePower">the size of the system pages as a power of 2</param>
            <param name="systemPageCount">the number of pages to start with, larger values decrease early performance hits but increase memory cost</param>
            <param name="hashSize">the hash size used by the internal hashtable. Higher makes for faster searching but increases memory usage</param>
        </member>
        <member name="P:Dragonbones.Systems.SystemRegistry.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Dragonbones.Systems.SystemRegistry.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Dragonbones.Systems.SystemRegistry.Count">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Register(Dragonbones.Systems.ISystem)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Clear">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.CreateSchedule(Dragonbones.Systems.SystemType,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.RecreateSchedule(Dragonbones.Systems.ISystemSchedule@)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Contains(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Contains(Dragonbones.Systems.ISystem)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetID(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetID(Dragonbones.Systems.ISystem)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetSystem(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetSystem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetTypeCount(Dragonbones.Systems.SystemType)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Remove(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Remove(Dragonbones.Systems.ISystem)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.SetAdmin(Dragonbones.IEntityAdmin)">
            <summary>
            Sets the controlling admin for this registry
            </summary>
            <param name="admin">The controlling admin used to set admin in systemInfo when a system is registered</param>
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Dispose(System.Boolean)">
            <summary>
            Dispose this object
            </summary>
            <param name="disposing">Are managed objects being disposed</param>
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Dragonbones.Systems.SystemSchedule">
            <summary>
            A base implementation of <see cref="T:Dragonbones.Systems.ISystemSchedule"/>
            uses a priority list to sort ahead of time
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.#ctor(Dragonbones.Systems.SystemType,System.Int32,System.Int32,System.Int32)">
            <summary>
            constructs an instance of <see cref="T:Dragonbones.Systems.SafeSystemSchedule"/>
            </summary>
            <param name="laneCount">the number of concurrent systems that can be run</param>
            <param name="type">the type of systems for this schedule</param>
            <param name="pagePower">the size of the storage pages as a power of 2, larger is closer to a flat array, but costs more memory</param>
            <param name="pageCount">the number of pages to initialize to start</param>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.#ctor(Dragonbones.Systems.SystemSchedule)">
            <summary>
            copies an instance of <see cref="T:Dragonbones.Systems.SafeSystemSchedule"/>
            </summary>
            <param name="copy">the schedule to copy</param>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.Clear">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.Add(Dragonbones.Systems.SystemInfo)">
            <summary>
            <inheritdoc />
            Only sorted on insertion
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.NextSystem(System.Int32,Dragonbones.Systems.SystemInfo@)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.FindPreviousEntry(Dragonbones.Systems.SystemInfo,Dragonbones.Systems.SystemSchedule.RREntry@)">
            <summary>
            find the index of the previous entry
            </summary>
            <param name="system">system to find previous entry</param>
            <param name="rr">the runrecurrence of the system if it exists
            if it does not exist then it is the one after it unless it is at the end then the previous run recurrence</param>
            <returns>the index of the previous entry or
            -1 if this entry should be placed at the beginning or
            -2 if it should be placed at the end</returns>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.Remove(Dragonbones.Systems.SystemInfo)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="T:Dragonbones.Systems.SystemSchedule.RREntry">
            <summary>
            The entry used to track location of beginning of the run recurrences for faster sorting
            </summary>
        </member>
        <member name="T:Dragonbones.Systems.SystemSchedule.Entry">
            <summary>
            Entry struct for storing linked list used in schedule
            </summary>
        </member>
        <member name="P:Dragonbones.Systems.SystemSchedule.Finished">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:Dragonbones.Systems.SystemSchedule.Count">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:Dragonbones.Systems.SystemSchedule.Type">
            <summary>
            The type of systems for this schedule
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.Reset">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.FinishLane(System.Int32)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.AddFromRegistry(Dragonbones.Systems.ISystemRegistry)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.Dispose(System.Boolean)">
            <summary>
            Disposes this object
            </summary>
            <param name="disposing">should managed objects be disposed</param>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.Dispose">
            <inheritdoc/>
        </member>
    </members>
</doc>
