<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dragonbones</name>
    </assembly>
    <members>
        <member name="T:Dragonbones.Components.ComponentBuffer`1">
            <summary>
            A base implementation of <see cref="T:Dragonbones.Components.IComponentBuffer`1"/>
            </summary>
            <typeparam name="TComponent">the component type stored</typeparam>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructs the component buffer
            </summary>
            <param name="initialCapacity">the initial size of the buffer</param>
            <param name="hashSize">the size of the buffer's hash table, the larger the faster the name lookup but the more memory used</param>
            <param name="typeName">The name of the component type stored here</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.SwapReadBuffer">
            <summary>
            Swaps the data buffer for reading
            </summary>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.SwapWriteBuffer">
            <summary>
            Swaps the data buffer for writing
            Should be done when finished writing
            </summary>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Dragonbones.Components.ComponentBuffer`1.TypeName">
            <summary>
            The user defined typeName
            be sure to make this as unique as possible
            (use project specific identifiers like {StudioName}.{ProjectName}.{ComponentName})
            </summary>
        </member>
        <member name="P:Dragonbones.Components.ComponentBuffer`1.BufferID">
            <summary>
            A ID assigned by the system to this Buffer
            Should be assigned by SetBufferID function
            </summary>
        </member>
        <member name="P:Dragonbones.Components.ComponentBuffer`1.WaitingClear">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.SetBufferID(System.Int32)">
            <summary>
            Sets the BufferID field
            Used by the system to set the buffer's ID
            !!! DO NOT USE THIS FUNCTION !!!
            </summary>
            <param name="id">The ID to set to this buffer</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Count(Dragonbones.Systems.SystemType)">
            <summary>
            Gets the count of entries in the buffer
            </summary>
            <param name="systemType">the type of system making the call which affects where in the buffer the data is retrieved</param>
            <returns>the count of entries in the buffer from the perspective of the system</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Constrict(System.Int32)">
            <summary>
            Attempts to shrink the buffer to a new capacity.
            If it cannot it will shrink as small as it can
            </summary>
            <param name="newCapacity">the capacity to attempt to shrink to</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Expand(System.Int32)">
            <summary>
            Expands the buffer to the new capacity
            </summary>
            <param name="newCapacity">the capacity to expand to</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.ContainsID(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Checks if there is a stored component associated with the given ID
            </summary>
            <param name="id">the ID to check</param>
            <param name="systemType">the type of system making the call</param>
            <returns>Whether the ID is associated with a stored component</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.ContainsName(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Check if there is a stored component associated with the given name
            </summary>
            <param name="name">the name to check</param>
            <param name="systemType">the type of system making the call</param>
            <returns>Whether the name is associated with a stored component</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.GetIDFromName(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Gets the ID associated with the given name
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="name">the name to find the ID of</param>
            <returns>the ID associated with the given name or -1 if not found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.RemoveAt(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Removes a component associated with the given ID
            </summary>
            <param name="systemType">the type of system making the call
            Remove calls are ignored from Render Systems</param>
            <param name="id">the ID associated with the component to remove</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.RemoveAt(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Removes a component associated with the given name
            </summary>
            <param name="systemType">the type of system making the call
            Remove calls are ignored from Render Systems</param>
            <param name="name"></param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Clear(Dragonbones.Systems.SystemType)">
            <summary>
            Remove all data from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Clear calls are ignored from Render Systems</param>
        </member>
        <member name="P:Dragonbones.Components.ComponentBuffer`1.Item(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Accesses a component for a system
            Render systems cannot set values
            </summary>
            <param name="systemType">what type of system is accessing the buffer</param>
            <param name="id">the ID of the component to access</param>
            <returns>The component associated with the ID</returns>
        </member>
        <member name="P:Dragonbones.Components.ComponentBuffer`1.Item(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Accesses a component for a system
            Render systems cannot set values
            </summary>
            <param name="systemType">what type of system is accessing the buffer</param>
            <param name="name">the name of the component to access</param>
            <returns>The component associated with the name</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Add(Dragonbones.Systems.SystemType,System.String,`0)">
            <summary>
            Adds a component to the buffer
            </summary>
            <param name="systemType">the type of system making the call, Render systems cannot add components</param>
            <param name="name">the name of the component I suggest something like {entityName}.{ComponentType}#</param>
            <param name="value">the value to store</param>
            <returns>the id associated with the value to store</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.TryGet(Dragonbones.Systems.SystemType,System.Int32,`0@)">
            <summary>
            Attempts to retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="id">the ID associated with the component</param>
            <param name="value">the component associated with the ID</param>
            <returns>Whether a component is associated with the given ID</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.TryGet(Dragonbones.Systems.SystemType,System.String,`0@)">
            <summary>
            Attempts to retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="name">the name associated with the component</param>
            <param name="value">the component associated with the name</param>
            <returns>Whether a component is associated with the given name</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Get(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="id">the ID associated with the component</param>
            <returns>the component associated with the ID</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Get(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="name">the name associated with the component</param>
            <returns>the component associated with the name</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Set(Dragonbones.Systems.SystemType,System.Int32,`0)">
            <summary>
            Set the value of a component from a system
            </summary>
            <param name="systemType">the type of system making the call
            Set calls are ignored from Render Systems</param>
            <param name="id">the ID associated with component</param>
            <param name="value">the value to set</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Set(Dragonbones.Systems.SystemType,System.String,`0)">
            <summary>
            Set the value of a component from a system
            </summary>
            <param name="systemType">the type of system making the call
            Set calls are ignored from Render Systems</param>
            <param name="name">the name associated with component</param>
            <param name="value">the value to set</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Remove(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Remove a component matching the given value
            </summary>
            <param name="systemType">the type of system making the call
            Remove calls are ignored from Render Systems</param>
            <param name="value">the value to remove</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Contains(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Does this Buffer contain a component
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="value">the component to check</param>
            <returns>Whether the component was found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.GetID(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Get the ID associated with a component
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="value">the component</param>
            <returns>the ID associated with the component or -1 if not found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.GetName(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Get the name associated with a component
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="value">the component</param>
            <returns>the name associated with a component or "~NOT FOUND~" if not found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.PopAt(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Retrieve then removes a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="name">the name associated with the component</param>
            <returns>the component associated with the name</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.PopAt(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Retrieve then removes a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="id">the ID associated with the component</param>
            <returns>the component associated with the ID</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Pop(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Retrieve current value of a component then remove it from the buffer
            This only works if the <see cref="!:TComponent"/>.Equals(<see cref="!:TComponent"/>); is written so that the items don't need to be completely identical
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="value">the component to retrieve and remove</param>
            <returns>the updated copy of the component</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.TryPopAt(Dragonbones.Systems.SystemType,System.String,`0@)">
            <summary>
            Attempts to retrieve then remove a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="name">the name associated with the component</param>
            <param name="value">the current value retrieved</param>
            <returns>Whether the pop was successful</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.TryPopAt(Dragonbones.Systems.SystemType,System.Int32,`0@)">
            <summary>
            Attempts to retrieve then remove a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="id">the ID associated with the component</param>
            <param name="value">the current value retrieved</param>
            <returns>Whether the pop was successful</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.TryPop(Dragonbones.Systems.SystemType,`0,`0@)">
            <summary>
            Attempts to retrieve current value of a component then remove it from the buffer
            This only works if the <see cref="!:TComponent"/>.Equals(<see cref="!:TComponent"/>); is written so that the items don't need to be completely identical
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="value">the component to retrieve and remove</param>
            <param name="newValue">the current value retrieved</param>
            <returns>Whether the pop was successful</returns>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="managed">dispose managed objects?</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentBuffer`1.Equals(Dragonbones.Components.IComponentBuffer)">
            <inheritdoc/>
        </member>
        <member name="T:Dragonbones.Components.ComponentTypeRegistry">
            <summary>
            The base implementation for <see cref="T:Dragonbones.Components.IComponentTypeRegistry"/>
            </summary>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for <see cref="T:Dragonbones.Components.ComponentTypeRegistry"/>
            </summary>
            <param name="componentTypeCount">the number of component types that will be registerered here</param>
            <param name="hashSize">the size of the hash table, the larger the faster the name search, the more memory it will use</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Clear">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Get``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Get``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.GetID(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.GetID(Dragonbones.Components.IComponentBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.GetName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.GetName(Dragonbones.Components.IComponentBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Register(Dragonbones.Components.IComponentBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Remove(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Remove(Dragonbones.Components.IComponentBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.TryGet``1(System.Int32,Dragonbones.Components.IComponentBuffer{``0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.TryGet``1(System.String,Dragonbones.Components.IComponentBuffer{``0}@)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Dispose(System.Boolean)">
            <summary>
            Disposes of this object
            </summary>
            <param name="disposing">Should managed objects be disposed</param>
        </member>
        <member name="M:Dragonbones.Components.ComponentTypeRegistry.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Dragonbones.Components.SingletonBuffer`1">
            <summary>
            A special form of a <see cref="T:Dragonbones.Components.IComponentBuffer"/> designed to store only a single value for all ids
            used to retrieve values which are universal over all instances
            </summary>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.#ctor(System.String)">
            <summary>
            Constructs a singleton buffer
            </summary>
            <param name="typeName">the name of the type of value stored</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.SwapReadBuffer">
            <summary>
            Swaps the data buffer for reading
            </summary>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.SwapWriteBuffer">
            <summary>
            Swaps the data buffer for writing
            Should be done when finished writing
            </summary>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Dragonbones.Components.SingletonBuffer`1.TypeName">
            <summary>
            The user defined typeName
            be sure to make this as unique as possible
            (use project specific identifiers like {StudioName}.{ProjectName}.{ComponentName})
            </summary>
        </member>
        <member name="P:Dragonbones.Components.SingletonBuffer`1.BufferID">
            <summary>
            A ID assigned by the system to this Buffer
            Should be assigned by SetBufferID function
            </summary>
        </member>
        <member name="P:Dragonbones.Components.SingletonBuffer`1.WaitingClear">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.SetBufferID(System.Int32)">
            <summary>
            Sets the BufferID field
            Used by the system to set the buffer's ID
            !!! DO NOT USE THIS FUNCTION !!!
            </summary>
            <param name="id">The ID to set to this buffer</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Count(Dragonbones.Systems.SystemType)">
            <summary>
            Gets the count of entries in the buffer
            </summary>
            <param name="systemType">the type of system making the call which affects where in the buffer the data is retrieved</param>
            <returns>the count of entries in the buffer from the perspective of the system</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Constrict(System.Int32)">
            <summary>
            Attempts to shrink the buffer to a new capacity.
            If it cannot it will shrink as small as it can
            </summary>
            <param name="newCapacity">the capacity to attempt to shrink to</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Expand(System.Int32)">
            <summary>
            Expands the buffer to the new capacity
            </summary>
            <param name="newCapacity">the capacity to expand to</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.ContainsID(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Checks if there is a stored component associated with the given ID
            </summary>
            <param name="id">the ID to check</param>
            <param name="systemType">the type of system making the call</param>
            <returns>Whether the ID is associated with a stored component</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.ContainsName(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Check if there is a stored component associated with the given name
            </summary>
            <param name="name">the name to check</param>
            <param name="systemType">the type of system making the call</param>
            <returns>Whether the name is associated with a stored component</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.GetIDFromName(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Gets the ID associated with the given name
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="name">the name to find the ID of</param>
            <returns>the ID associated with the given name or -1 if not found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.RemoveAt(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Removes a component associated with the given ID
            </summary>
            <param name="systemType">the type of system making the call
            Remove calls are ignored from Render Systems</param>
            <param name="id">the ID associated with the component to remove</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.RemoveAt(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Removes a component associated with the given name
            </summary>
            <param name="systemType">the type of system making the call
            Remove calls are ignored from Render Systems</param>
            <param name="name"></param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Clear(Dragonbones.Systems.SystemType)">
            <summary>
            Remove all data from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Clear calls are ignored from Render Systems</param>
        </member>
        <member name="P:Dragonbones.Components.SingletonBuffer`1.Item(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Accesses a component for a system
            Render systems cannot set values
            </summary>
            <param name="systemType">what type of system is accessing the buffer</param>
            <param name="id">the ID of the component to access</param>
            <returns>The component associated with the ID</returns>
        </member>
        <member name="P:Dragonbones.Components.SingletonBuffer`1.Item(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Accesses a component for a system
            Render systems cannot set values
            </summary>
            <param name="systemType">what type of system is accessing the buffer</param>
            <param name="name">the name of the component to access</param>
            <returns>The component associated with the name</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Add(Dragonbones.Systems.SystemType,System.String,`0)">
            <summary>
            Adds a component to the buffer
            </summary>
            <param name="systemType">the type of system making the call, Render systems cannot add components</param>
            <param name="name">the name of the component I suggest something like {entityName}.{ComponentType}#</param>
            <param name="value">the value to store</param>
            <returns>the id associated with the value to store</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.TryGet(Dragonbones.Systems.SystemType,System.Int32,`0@)">
            <summary>
            Attempts to retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="id">the ID associated with the component</param>
            <param name="value">the component associated with the ID</param>
            <returns>Whether a component is associated with the given ID</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.TryGet(Dragonbones.Systems.SystemType,System.String,`0@)">
            <summary>
            Attempts to retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="name">the name associated with the component</param>
            <param name="value">the component associated with the name</param>
            <returns>Whether a component is associated with the given name</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Get(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="id">the ID associated with the component</param>
            <returns>the component associated with the ID</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Get(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Retrieve a component for a system
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="name">the name associated with the component</param>
            <returns>the component associated with the name</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Set(Dragonbones.Systems.SystemType,System.Int32,`0)">
            <summary>
            Set the value of a component from a system
            </summary>
            <param name="systemType">the type of system making the call
            Set calls are ignored from Render Systems</param>
            <param name="id">the ID associated with component</param>
            <param name="value">the value to set</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Set(Dragonbones.Systems.SystemType,System.String,`0)">
            <summary>
            Set the value of a component from a system
            </summary>
            <param name="systemType">the type of system making the call
            Set calls are ignored from Render Systems</param>
            <param name="name">the name associated with component</param>
            <param name="value">the value to set</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Remove(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Remove a component matching the given value
            </summary>
            <param name="systemType">the type of system making the call
            Remove calls are ignored from Render Systems</param>
            <param name="value">the value to remove</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Contains(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Does this Buffer contain a component
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="value">the component to check</param>
            <returns>Whether the component was found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.GetID(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Get the ID associated with a component
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="value">the component</param>
            <returns>the ID associated with the component or -1 if not found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.GetName(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Get the name associated with a component
            </summary>
            <param name="systemType">the type of system making the call</param>
            <param name="value">the component</param>
            <returns>the name associated with a component or "~NOT FOUND~" if not found in the buffer</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.PopAt(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Retrieve then removes a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="name">the name associated with the component</param>
            <returns>the component associated with the name</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.PopAt(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Retrieve then removes a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="id">the ID associated with the component</param>
            <returns>the component associated with the ID</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Pop(Dragonbones.Systems.SystemType,`0)">
            <summary>
            Retrieve current value of a component then remove it from the buffer
            This only works if the <see cref="!:TComponent"/>.Equals(<see cref="!:TComponent"/>); is written so that the items don't need to be completely identical
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="value">the component to retrieve and remove</param>
            <returns>the updated copy of the component</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.TryPopAt(Dragonbones.Systems.SystemType,System.String,`0@)">
            <summary>
            Attempts to retrieve then remove a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="name">the name associated with the component</param>
            <param name="value">the current value retrieved</param>
            <returns>Whether the pop was successful</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.TryPopAt(Dragonbones.Systems.SystemType,System.Int32,`0@)">
            <summary>
            Attempts to retrieve then remove a component from the buffer
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="id">the ID associated with the component</param>
            <param name="value">the current value retrieved</param>
            <returns>Whether the pop was successful</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.TryPop(Dragonbones.Systems.SystemType,`0,`0@)">
            <summary>
            Attempts to retrieve current value of a component then remove it from the buffer
            This only works if the <see cref="!:TComponent"/>.Equals(<see cref="!:TComponent"/>); is written so that the items don't need to be completely identical
            </summary>
            <param name="systemType">the type of system making the call
            Pop calls are ignored from Render Systems</param>
            <param name="value">the component to retrieve and remove</param>
            <param name="newValue">the current value retrieved</param>
            <returns>Whether the pop was successful</returns>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Dispose(System.Boolean)">
            <summary>
            Dispose this object
            </summary>
            <param name="disposing">Are managed objects being disposed</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Equals(Dragonbones.Components.IComponentBuffer)">
            <inheritdoc/>
        </member>
        <member name="T:Dragonbones.Components.SingletonBuffer`1.Enumerator">
            <summary>
            Implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/> for a Singleton Buffer
            </summary>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Enumerator.#ctor(Dragonbones.Collections.BufferTransactionType,Dragonbones.Components.SingletonBuffer{`0})">
            <summary>
            Basic constructor for the enumerator
            </summary>
            <param name="type">the transaction type, used to define where the information comes from</param>
            <param name="buffer">the buffer data comes from</param>
        </member>
        <member name="P:Dragonbones.Components.SingletonBuffer`1.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Enumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Enumerator.Dispose(System.Boolean)">
            <summary>
            Disposes this object
            </summary>
            <param name="disposing">is this disposing managed objects</param>
        </member>
        <member name="M:Dragonbones.Components.SingletonBuffer`1.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Dragonbones.Entities.EntityBuffer">
            <summary>
            A Default implementation of <see cref="T:Dragonbones.Entities.IEntityBuffer"/>
            </summary>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for Entity buffer
            </summary>
            <param name="initialCapacity">the initial capacity for the buffer</param>
            <param name="hashSize">the size of the buffer's hashtable the larger the quicker name searches are but the more memory used</param>
        </member>
        <member name="P:Dragonbones.Entities.EntityBuffer.RemovedEntities">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.SwapReadBuffer">
            <summary>
            Swaps the data buffer for reading
            </summary>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.SwapWriteBuffer">
            <summary>
            Swaps the data buffer for writing
            Should be done when finished writing
            </summary>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Dragonbones.Entities.EntityBuffer.Item(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Get the ID associated with a specific entity
            </summary>
            <param name="systemType">The type of system accessing this buffer
            This determines where the information comes from</param>
            <param name="name">the name of the entity</param>
            <returns>the ID associated with the entity</returns>
        </member>
        <member name="P:Dragonbones.Entities.EntityBuffer.Item(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Access the name associated with an entity
            </summary>
            <param name="systemType">The type of system accessing this buffer
            This determines where the information comes from</param>
            <param name="id">the ID associated with the entity</param>
            <returns>the name of the entity</returns>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Count(Dragonbones.Systems.SystemType)">
            <summary>
            retrieve the number of entities contained within this buffer
            </summary>
            <param name="systemType">The type of system accessing this buffer
            This determines where the information comes from</param>
            <returns>the number of entities contained within this buffer</returns>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Add(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Add a new entity to this buffer
            </summary>
            <param name="systemType">The type of system accessing this buffer
            Render systems cannot create new entities</param>
            <param name="name">the name of the new entity</param>
            <returns>the ID associated with the new entity</returns>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.GetID(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Get the ID associated with an entity
            </summary>
            <param name="systemType">The type of system accessing this buffer
            This determines where the information comes from</param>
            <param name="name">the name of the entity</param>
            <returns>the ID associated with the entity or -1 if not found</returns>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.GetName(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Get the name of an entity
            </summary>
            <param name="systemType">The type of system accessing this buffer
            This determines where the information comes from</param>
            <param name="id">the ID associated with the entity</param>
            <returns>the name of the entity</returns>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Contains(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Does the buffer contain an entity
            </summary>
            <param name="systemType">The type of system accessing this buffer
            This determines where the information comes from</param>
            <param name="name">the name of the entity</param>
            <returns>Whether the buffer contains the entity</returns>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Contains(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Does the buffer contain an entity
            </summary>
            <param name="systemType">The type of system accessing this buffer
            This determines where the information comes from</param>
            <param name="id">the ID associated with the entity</param>
            <returns>Whether the buffer contains the entity</returns>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Rename(Dragonbones.Systems.SystemType,System.String,System.String)">
            <summary>
            Rename an entity
            </summary>
            <param name="systemType">The type of system accessing this buffer
            Render systems cannot rename entities</param>
            <param name="oldName">the current name of the entity</param>
            <param name="newName">the new name of the entity</param>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Rename(Dragonbones.Systems.SystemType,System.Int32,System.String)">
            <summary>
            Rename an entity
            </summary>
            <param name="systemType">The type of system accessing this buffer
            Render systems cannot rename entities</param>
            <param name="id">the ID associated with the entity</param>
            <param name="newName">the new name of the entity</param>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Remove(Dragonbones.Systems.SystemType,System.String)">
            <summary>
            Remove an entity
            </summary>
            <param name="systemType">The type of system accessing this buffer
            Render systems cannot remove entities</param>
            <param name="name">the name of the entity to remove</param>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Remove(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Remove an entity
            </summary>
            <param name="systemType">The type of system accessing this buffer
            Render systems cannot remove entities</param>
            <param name="id">the id associated with the entity</param>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Clear(Dragonbones.Systems.SystemType)">
            <summary>
            Clears the entity buffer
            !!! This destroys all entities !!!
            </summary>
            <param name="systemType">The type of system accessing this buffer
            Render systems cannot clear the buffer</param>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Dragonbones.Entities.EntityBuffer.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="managed">should managed resources be disposed</param>
        </member>
        <member name="T:Dragonbones.Entities.LinkBuffer">
            <summary>
            A default implementation of <see cref="T:Dragonbones.Entities.ILinkBuffer"/>
            </summary>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an entity component buffer
            </summary>
            <param name="componentTypeCount">the number of different component types</param>
            <param name="initialComponentSize">the default number of links allocated for a component type. More space is allocated when needed</param>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.SwapReadBuffer">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.SwapWriteBuffer">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.Add(Dragonbones.Systems.SystemType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a link between a component and an entity
            Only one link between an entity and a component type can exist
            </summary>
            <param name="systemType">the type of system making the call, render systems cannot add entity component links</param>
            <param name="componentType">The ID of the component type</param>
            <param name="entityID">the ID of the entity</param>
            <param name="componentID">the ID of the instance of the component</param>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.GetComponent(Dragonbones.Systems.SystemType,System.Int32,System.Int32)">
            <summary>
            Retrieve the ID of the component linked to an entity
            </summary>
            <param name="systemType">the type of system making the call, this depends on where the data comes from</param>
            <param name="componentType">the ID of the component type</param>
            <param name="entity">the ID of the entity</param>
            <returns>the ID of the component of the type related to the entity or -1 if no such link exists</returns>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.GetComponents(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Get all components related to an entity
            </summary>
            <param name="systemType">the type of system making the call, this depends on where the data comes from</param>
            <param name="entity">the ID of the entity</param>
            <returns>An array of all the componentTypeIDs with the componentIDs the first ID in the tuple is the type, the second is the instance ID</returns>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.GetLinks(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Get all the entity component links for a specific component type
            </summary>
            <param name="systemType">the type of system making the call, this depends on where the data comes from</param>
            <param name="componentType">The ID of the type of component</param>
            <returns></returns>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.ContainsLink(Dragonbones.Systems.SystemType,System.Int32,System.Int32)">
            <summary>
            Does an entity have a link with a component of a specific type
            </summary>
            <param name="systemType">the type of system making the call, this affects what data is retrieved</param>
            <param name="componentType">the ID of the component type</param>
            <param name="entity">the ID of the entity</param>
            <returns></returns>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.GetLinks(Dragonbones.Systems.SystemType,System.Int32[])">
            <summary>
            Gets component links for all entities which have all component types
            </summary>
            <param name="systemType">the type of system making the call, this affects what data is retrieved</param>
            <param name="componentTypes">the list of component types to look for</param>
            <returns>A list of component link arrays, each array is in the same order as the component type array passed and represents a single entity</returns>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.RemoveLink(Dragonbones.Systems.SystemType,System.Int32,System.Int32)">
            <summary>
            Removes a specific entity component link
            </summary>
            <param name="systemType">the type of system making the call, render systems cannot make the call</param>
            <param name="componentType">the ID of the component type involved in the link</param>
            <param name="entity">the ID of the entity involved in the link</param>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.RemoveComponent(Dragonbones.Systems.SystemType,System.Int32,System.Int32)">
            <summary>
            Removes all links related to a specific component
            </summary>
            <param name="systemType">the type of system making the call, render systems cannot make the call</param>
            <param name="componentType">the ID of the component type involved in the link</param>
            <param name="componentID">the ID of the component instance to remove</param>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.RemoveEntity(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Removes all links related to an entity
            </summary>
            <param name="systemType">the type of system making the call, render systems cannot make the call</param>
            <param name="entity">the ID of the entity involved in the links</param>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.Clear(Dragonbones.Systems.SystemType)">
            <summary>
            Clears all link data
            </summary>
            <param name="systemType">the type of system making the call, render systems cannot make the call</param>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.Clear(Dragonbones.Systems.SystemType,System.Int32)">
            <summary>
            Clears all data for a specific component type
            </summary>
            <param name="systemType">the type of system making the call, render systems cannot make the call</param>
            <param name="componentType">the ID of the component type to clear</param>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.FindIndex(Dragonbones.Collections.BufferTransactionType,Dragonbones.Entities.LinkBuffer.Entry,System.Int32,System.Int32@)">
            <summary>
            Find where an entity exists in an Entry or where it should go
            </summary>
            <param name="type">the type of buffer transaction, depends on where the data comes from</param>
            <param name="ent">the entry to search</param>
            <param name="entityID">the entity ID</param>
            <param name="index">the returned index of where the entity is or should go</param>
            <returns>If the entity already has a link in the entry</returns>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.FindIndex(Dragonbones.Collections.BufferTransactionType,Dragonbones.Entities.LinkBuffer.Entry,System.Int32,System.Int32@,Dragonbones.Entities.EntityComponentLink@)">
            <summary>
            Find where an entity exists in an Entry or where it should go
            </summary>
            <param name="type">the type of buffer transaction, depends on where the data comes from</param>
            <param name="ent">the entry to search</param>
            <param name="entityID">the entity ID</param>
            <param name="index">the returned index of where the entity is or should go</param>
            <param name="link">the returned link data of the entity found</param>
            <returns>If the entity already has a link in the entry</returns>
        </member>
        <member name="P:Dragonbones.Entities.LinkBuffer.Entry.Top">
            <summary>
            The top entry in the Links buffer
            </summary>
        </member>
        <member name="P:Dragonbones.Entities.LinkBuffer.Entry.Links">
            <summary>
            The buffer of entity component links for this component type
            </summary>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.Dispose(System.Boolean)">
            <summary>
            Dispose this object
            </summary>
            <param name="disposing">Are managed objects being disposed</param>
        </member>
        <member name="M:Dragonbones.Entities.LinkBuffer.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Dragonbones.Systems.SafeSystemSchedule">
            <summary>
            A base implementation of <see cref="T:Dragonbones.Systems.ISystemSchedule"/> for Logic Systems
            uses a priority list to sort ahead of time
            Checks for conflicts in components to avoid parallel access
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.#ctor(Dragonbones.Systems.SystemType,System.Int32,System.Int32)">
            <summary>
            constructs an instance of <see cref="T:Dragonbones.Systems.SafeSystemSchedule"/>
            </summary>
            <param name="laneCount">the number of concurrent systems that can be run</param>
            <param name="maxSize">the maximum number of systems to be stored</param>
            <param name="type">the type of systems for this schedule</param>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.#ctor(Dragonbones.Systems.SafeSystemSchedule)">
            <summary>
            copies an instance of <see cref="T:Dragonbones.Systems.SafeSystemSchedule"/>
            </summary>
            <param name="copy">the schedule to copy</param>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.Clear">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.Add(Dragonbones.Systems.SystemInfo)">
            <summary>
            <inheritdoc />
            Only sorted on insertion
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.NextSystem(System.Int32,Dragonbones.Systems.SystemInfo@)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.FindPreviousEntry(Dragonbones.Systems.SystemInfo,Dragonbones.Systems.SafeSystemSchedule.RREntry@)">
            <summary>
            find the index of the previous entry
            </summary>
            <param name="system">system to find previous entry</param>
            <param name="rr">the runrecurrence of the system if it exists
            if it does not exist then it is the one after it unless it is at the end then the previous run recurrence</param>
            <returns>the index of the previous entry or
            -1 if this entry should be placed at the beginning or
            -2 if it should be placed at the end</returns>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.Remove(Dragonbones.Systems.SystemInfo)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="T:Dragonbones.Systems.SafeSystemSchedule.RREntry">
            <summary>
            The entry used to track location of beginning of the run recurrences for faster sorting
            </summary>
        </member>
        <member name="T:Dragonbones.Systems.SafeSystemSchedule.Entry">
            <summary>
            Entry struct for storing linked list used in schedule
            </summary>
        </member>
        <member name="P:Dragonbones.Systems.SafeSystemSchedule.Finished">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:Dragonbones.Systems.SafeSystemSchedule.Count">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:Dragonbones.Systems.SafeSystemSchedule.Type">
            <summary>
            The type of systems for this schedule
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.Reset">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.FinishLane(System.Int32)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SafeSystemSchedule.AddFromRegistry(Dragonbones.Systems.ISystemRegistry)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="T:Dragonbones.Systems.SystemRegistry">
             <summary>
             A base version of the <see cref="T:Dragonbones.Systems.SystemRegistry"/>
            
             This uses a <see cref="T:Dragonbones.Collections.NamedDataRegistry`1"/> to store the systems
             </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an instance of <see cref="T:Dragonbones.Systems.SystemRegistry"/>
            </summary>
            <param name="maxSystemCount">the maximum number of systems to every be added to the registry</param>
            <param name="hashSize">the hash size used by the internal hashtable. Higher makes for faster searching but increases memory usage</param>
        </member>
        <member name="P:Dragonbones.Systems.SystemRegistry.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Dragonbones.Systems.SystemRegistry.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Dragonbones.Systems.SystemRegistry.Count">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Register(Dragonbones.Systems.ISystem)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Clear">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.CreateSchedule(Dragonbones.Systems.SystemType,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.RecreateSchedule(Dragonbones.Systems.ISystemSchedule@)">
            <inheritdoc/>
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Contains(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Contains(Dragonbones.Systems.ISystem)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetID(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetID(Dragonbones.Systems.ISystem)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetSystem(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetSystem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.GetTypeCount(Dragonbones.Systems.SystemType)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Remove(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Remove(Dragonbones.Systems.ISystem)">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Dispose(System.Boolean)">
            <summary>
            Dispose this object
            </summary>
            <param name="disposing">Are managed objects being disposed</param>
        </member>
        <member name="M:Dragonbones.Systems.SystemRegistry.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Dragonbones.Systems.SystemSchedule">
            <summary>
            A base implementation of <see cref="T:Dragonbones.Systems.ISystemSchedule"/>
            uses a priority list to sort ahead of time
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.#ctor(Dragonbones.Systems.SystemType,System.Int32,System.Int32)">
            <summary>
            constructs an instance of <see cref="T:Dragonbones.Systems.SystemSchedule"/>
            </summary>
            <param name="laneCount">the number of concurrent systems that can be run</param>
            <param name="maxSize">the maximum number of systems to be stored</param>
            <param name="type">the type of systems for this schedule</param>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.#ctor(Dragonbones.Systems.SystemSchedule)">
            <summary>
            copies an instance of <see cref="T:Dragonbones.Systems.SystemSchedule"/>
            </summary>
            <param name="copy">the schedule to copy</param>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.Clear">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.Add(Dragonbones.Systems.SystemInfo)">
            <summary>
            <inheritdoc />
            Only sorted on insertion
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.NextSystem(System.Int32,Dragonbones.Systems.SystemInfo@)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.FindPreviousEntry(Dragonbones.Systems.SystemInfo,Dragonbones.Systems.SystemSchedule.RREntry@)">
            <summary>
            find the index of the previous entry
            </summary>
            <param name="system">system to find previous entry</param>
            <param name="rr">the runrecurrence of the system if it exists
            if it does not exist then it is the one after it unless it is at the end then the previous run recurrence</param>
            <returns>the index of the previous entry or
            -1 if this entry should be placed at the beginning or
            -2 if it should be placed at the end</returns>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.Remove(Dragonbones.Systems.SystemInfo)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="T:Dragonbones.Systems.SystemSchedule.RREntry">
            <summary>
            The entry used to track location of beginning of the run recurrences for faster sorting
            </summary>
        </member>
        <member name="T:Dragonbones.Systems.SystemSchedule.Entry">
            <summary>
            Entry struct for storing linked list used in schedule
            </summary>
        </member>
        <member name="P:Dragonbones.Systems.SystemSchedule.Finished">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:Dragonbones.Systems.SystemSchedule.Count">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="P:Dragonbones.Systems.SystemSchedule.Type">
            <summary>
            The type of systems for this schedule
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.Reset">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.FinishLane(System.Int32)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
        <member name="M:Dragonbones.Systems.SystemSchedule.AddFromRegistry(Dragonbones.Systems.ISystemRegistry)">
            <summary>
            <inheritdoc />
            </summary>
        </member>
    </members>
</doc>
